resources:
  containers:
  - container: mysql
    image: mysql:5.7.40
    ports:
    - "3300:3306"
    env:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: test
  - container: postgres
    image: postgres:15.0-alpine
    ports:
    - 5432:5432
    env:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: test
  - container: sqlserver
    image: mcr.microsoft.com/mssql/server:2017-CU17-ubuntu
    ports:
    - "1433:1433"
    env:
      ACCEPT_EULA: Y
      SA_PASSWORD: P@ssw0rd

variables:
  DotNetCoreSdkVersion: '6.0.x'

jobs:
  - job: Linux_MySQL
    pool:
      vmimage: 'ubuntu-22.04'
    services:
      mysql: mysql
    variables:
      ConnectionString: "Server=localhost;Port=3300;User Id=root;Password=password;SSL Mode=none;Database=test;CharacterSet=utf8mb4"
    steps:
      - task: UseDotNet@2
        inputs:
          version: $(DotNetCoreSdkVersion)
      - bash: |
          for i in `seq 1 30`; do
            sleep 1
            docker exec `docker container ls -n1 -q` mysql -uroot -ppassword -Dtest -e "SELECT 1"
            if [ $? -ne 0 ]; then continue; fi
            echo "MySQL is ready"
            exit 0
          done
        displayName: 'Wait for MySQL'
      - task: DotNetCoreCLI@2
        displayName: MySqlConnector
        inputs:
          command: 'test'
          workingDirectory: tests/MySqlConnector.Tests
          publishTestResults: false
          arguments: '--logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/MySqlConnector.Tests.trx"'
        continueOnError: true
        env:
          ConnectionString: $(ConnectionString)
      - task: DotNetCoreCLI@2
        displayName: MySql.Data 6
        inputs:
          command: 'test'
          workingDirectory: tests/MySqlData.Tests
          publishTestResults: false
          arguments: '--logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/MySqlData.Tests.trx"'
        continueOnError: true
        env:
          ConnectionString: $(ConnectionString)
      - task: DotNetCoreCLI@2
        displayName: MySql.Data 8
        inputs:
          command: 'test'
          workingDirectory: tests/MySqlData8.Tests
          publishTestResults: false
          arguments: '--logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/MySqlData8.Tests.trx"'
        continueOnError: true
        env:
          ConnectionString: $(ConnectionString)
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: MySQL
          targetPath: $(Build.ArtifactStagingDirectory)

  - job: Linux_PostgreSQL
    pool:
      vmimage: 'ubuntu-22.04'
    services:
      postgres: postgres
    variables:
      ConnectionString: "host=localhost;user id=root;password=test;database=root"
    steps:
      - task: UseDotNet@2
        inputs:
          version: $(DotNetCoreSdkVersion)
      - task: DotNetCoreCLI@2
        displayName: Npgsql 4
        inputs:
          command: 'test'
          workingDirectory: tests/Npgsql4.Tests
          publishTestResults: false
          arguments: '--logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/Npgsql4.Tests.trx"'
        continueOnError: true
        env:
          ConnectionString: $(ConnectionString)
      - task: DotNetCoreCLI@2
        displayName: Npgsql 5
        inputs:
          command: 'test'
          workingDirectory: tests/Npgsql5.Tests
          publishTestResults: false
          arguments: '--logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/Npgsql5.Tests.trx"'
        continueOnError: true
        env:
          ConnectionString: $(ConnectionString)
      - task: DotNetCoreCLI@2
        displayName: Npgsql 6
        inputs:
          command: 'test'
          workingDirectory: tests/Npgsql6.Tests
          publishTestResults: false
          arguments: '--logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/Npgsql6.Tests.trx"'
        continueOnError: true
        env:
          ConnectionString: $(ConnectionString)
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: PostgreSQL
          targetPath: $(Build.ArtifactStagingDirectory)

  - job: Linux_SQLite
    pool:
      vmimage: 'ubuntu-22.04'
    steps:
      - task: UseDotNet@2
        inputs:
          version: $(DotNetCoreSdkVersion)
      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          workingDirectory: tests/MicrosoftSqlite.Tests
          publishTestResults: false
          arguments: '--logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/MicrosoftSqlite.Tests.trx"'
        continueOnError: true
      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          workingDirectory: tests/MicrosoftSqlite5.Tests
          publishTestResults: false
          arguments: '--logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/MicrosoftSqlite5.Tests.trx"'
        continueOnError: true
      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          workingDirectory: tests/Sqlite.Tests
          publishTestResults: false
          arguments: '--logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/Sqlite.Tests.trx"'
        continueOnError: true
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: SQLite
          targetPath: $(Build.ArtifactStagingDirectory)

  - job: Linux_SQLServer
    pool:
      vmimage: 'ubuntu-22.04'
    services:
      sqlserver: sqlserver
    variables:
      ConnectionString: 'data source=localhost;user id=sa;password=P@ssw0rd;initial catalog=sqlclient;TrustServerCertificate=True;'
    steps:
      - task: UseDotNet@2
        inputs:
          version: $(DotNetCoreSdkVersion)
      - script: |
          docker exec `docker container ls -n1 -q` /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P P@ssw0rd -Q "create database sqlclient;"
        displayName: 'Create sqlclient database'
      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          workingDirectory: tests/MicrosoftSqlClient4.Tests
          publishTestResults: false
          arguments: '--logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/MicrosoftSqlClient4.Tests.trx"'
        continueOnError: true
        env:
          ConnectionString: $(ConnectionString)
      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          workingDirectory: tests/MicrosoftSqlClient5.Tests
          publishTestResults: false
          arguments: '--logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/MicrosoftSqlClient5.Tests.trx"'
        continueOnError: true
        env:
          ConnectionString: $(ConnectionString)
      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          workingDirectory: tests/SqlClient.Tests
          publishTestResults: false
          arguments: '--logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/SqlClient.Tests.trx"'
        continueOnError: true
        env:
          ConnectionString: $(ConnectionString)
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'SqlClient'
          targetPath: $(Build.ArtifactStagingDirectory)

  - job: Windows_SQLServer
    pool:
      vmimage: 'windows-2022'
    variables:
      ConnectionString: 'Data Source=(LocalDb)\MSSQLLocalDB;Initial Catalog=tempdb;Trusted_Connection=True;'
    steps:
      - task: UseDotNet@2
        inputs:
          version: $(DotNetCoreSdkVersion)
      - task: DotNetCoreCLI@2
        displayName: SqlClientBcl
        inputs:
          command: 'test'
          workingDirectory: tests\SqlClientBcl.Tests
          publishTestResults: false
          arguments: '--logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)\SqlClientBcl.Tests.trx"'
        continueOnError: true
        env:
          ConnectionString: $(ConnectionString)
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: SqlClientBcl
          targetPath: $(Build.ArtifactStagingDirectory)

  - job: Results
    dependsOn:
      - Linux_MySQL
      - Linux_PostgreSQL
      - Linux_SQLite
      - Linux_SQLServer
      - Windows_SQLServer
    pool:
      vmimage: 'ubuntu-22.04'
    steps:
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: MySQL
          targetPath: $(Agent.BuildDirectory)/tests
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: PostgreSQL
          targetPath: $(Agent.BuildDirectory)/tests
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: SqlClient
          targetPath: $(Agent.BuildDirectory)/tests
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: SqlClientBcl
          targetPath: $(Agent.BuildDirectory)/tests
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: SQLite
          targetPath: $(Agent.BuildDirectory)/tests
      - task: UseDotNet@2
        inputs:
          version: $(DotNetCoreSdkVersion)
      - task: DotNetCoreCLI@2
        inputs:
          command: 'run'
          workingDirectory: src/AdoNetApiTest
          publishTestResults: false
          arguments: '$(Agent.BuildDirectory)/tests $(Build.ArtifactStagingDirectory)'
      - script: 'git -c http.https://github.com.extraheader="AUTHORIZATION: basic $(GitHubAuthorization)" clone --depth 1 --branch gh-pages https://github.com/mysql-net/AdoNetResults.git ../AdoNetResults'
        displayName: Clone GitHub Pages repo
        condition: ne(variables['Build.Reason'], 'PullRequest')
      - script: |
          cp $(Build.ArtifactStagingDirectory)/results.html index.html
          git config user.name "Build Bot"
          git config user.email "buildbot@example.com"
          git add index.html
          git commit -m "Update test results."
          git -c http.https://github.com.extraheader="AUTHORIZATION: basic $(GitHubAuthorization)" push origin
        displayName: Update GitHub Pages
        workingDirectory: ../AdoNetResults
        condition: ne(variables['Build.Reason'], 'PullRequest')
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'Results'
          targetPath: $(Build.ArtifactStagingDirectory)

trigger:
  batch: false
  branches:
    include:
    - master

# Trigger builds for PR's targeting master
pr:
  branches:
    include:
    - master
